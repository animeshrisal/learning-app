// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TEACHER
  ADMIN
}

model User {
  id        String  @id @default(cuid())
  username  String  @unique
  email     String  @unique
  role      Role    @default(USER)
  password  String
  firstName String?
  lastName  String?

  classesEnrolled Enrollment[]
  classes         Classroom[] //For teacher
  Comment         Comment[]
  Annoucement     Annoucement[]
  UserLesson      UserLesson[]

  UserQuestion UserQuestion[]

}

model Enrollment {
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String // relation scalar field (used in the `@relation` attribute above)
  user        User      @relation(fields: [userId], references: [id])
  userId      String // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, classroomId])
}

model Category {
  id   String @id @default(cuid())
  name String @unique
}

model Classroom {
  id String @id @default(cuid())

  subject     String
  description String

  activeStatus Boolean  @default(true)
  lessons      Lesson[]

  quizzes     Quiz[]
  Annoucement Annoucement[]
  User        User          @relation(fields: [userId], references: [id])
  userId      String

  image String?

  enrolledStudents Enrollment[]
}

model Lesson {
  id    String @id @default(cuid())
  order Int

  name        String
  description String
  body        String

  Classroom   Classroom    @relation(fields: [classroomId], references: [id])
  classroomId String
  UserLesson  UserLesson[]

  nextId      String? @unique
  next        Lesson? @relation("NextLesson", fields: [nextId], references: [id])
  currentNext Lesson? @relation("NextLesson")

  previousId      String? @unique
  previous        Lesson? @relation("PreviousLesson", fields: [previousId], references: [id])
  currentPrevious Lesson? @relation("PreviousLesson")

  @@unique([id, order])
}

enum QuizState {
  IN_REVIEW
  ACTIVE
  ARCHIVED
}

model Quiz {
  id String @id @default(cuid())

  Classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String

  name     String
  state    QuizState  @default(IN_REVIEW)
  question Question[]
}

model Question {
  id            String @id @default(cuid())
  question      String
  firstChoice   String
  secondChoice  String
  thirdChoice   String
  fourthChoice  String
  correctChoice Int
  order         Int

  Quiz         Quiz?          @relation(fields: [quizId], references: [id])
  quizId       String?
  UserQuestion UserQuestion[]

  nextId      String?   @unique
  next        Question? @relation("NextQuestion", fields: [nextId], references: [id])
  currentNext Question? @relation("NextQuestion")

  previousId      String?   @unique
  previous        Question? @relation("PreviousQuestion", fields: [previousId], references: [id])
  currentPrevious Question? @relation("PreviousQuestion")

}

model UserLesson {
  user      User    @relation(fields: [userId], references: [id])
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  userId    String
  lessonId  String
  completed Boolean

  @@id([userId, lessonId])
}

model UserQuestion {
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  userId     String
  questionId String

  completed Boolean

  @@id([userId, questionId])
}

model Comment {
  id        String   @id @default(cuid())
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

}

model Annoucement {
  id          String    @id @default(cuid())
  descripting String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String
  createdAt   DateTime  @default(now())
}
